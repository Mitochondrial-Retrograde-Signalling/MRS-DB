{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","setData","useState","geneListOptions","setGeneListOptions","selectedGeneList","setSelectedGeneList","geneOptions","setGeneOptions","selectedGenes","setSelectedGenes","timepoints","setTimepoints","selectedTimepointRange","setSelectedTimepointRange","allGenesByGeneList","setAllGenesByGeneList","cellTypes","setCellTypes","selectedCellTypes","setSelectedCellTypes","genotypes","setGenotypes","selectedGenotypes","setSelectedGenotypes","plotVisibility","setPlotVisibility","showScrollUp","setShowScrollUp","geneDetailsByGeneList","setGeneDetailsByGeneList","location","useLocation","navigate","useNavigate","skipNextSync","useRef","showDescriptions","setShowDescriptions","wrappedLabels","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","files","Promise","all","map","f","fetch","then","res","json","jsons","newData","geneLists","Set","allCellTypes","allGenotypes","tpMap","geneDetailsByList","forEach","file","i","tp","Timepoint","GeneList","Object","entries","_ref","geneList","genes","add","_ref2","_geneData$Details","_geneData$Details2","gene","geneData","geneName","Details","GeneName","label","description","Description","id","name","_ref3","genotype","cellMap","keys","cellType","numericTPs","parseInt","sort","a","b","length","Array","from","geneDetails","options","values","_ref4","value","setTimeout","dispatchEvent","Event","_params$get","_params$get2","_params$get3","current","params","URLSearchParams","search","org","get","cellTypesParsed","split","genotypesParsed","tpRange","Number","validRange","includes","NaN","_params$get4","validGenes","filter","g","set","join","newSearch","toString","startsWith","substring","replace","React","createElement","Fragment","style","position","top","backgroundColor","zIndex","padding","borderBottom","width","marginBottom","margin","display","flexWrap","gap","alignItems","maxWidth","flex","title","marginLeft","cursor","fontSize","color","height","Select","o","onChange","opt","placeholder","isSearchable","styles","container","base","isMulti","opts","closeMenuOnSelect","valueContainer","maxHeight","overflowY","menu","console","log","find","filterOption","option","inputValue","matchSorter","isDisabled","control","minHeight","onClick","prev","right","writingMode","transform","fontWeight","justifyContent","borderTopRightRadius","borderBottomRightRadius","boxShadow","transition","userSelect","borderLeft","border","background","_geneDetailsByGeneLis","details","key","ct","Slider","range","min","max","marks","reduce","acc","step","allowCross","paddingLeft","_data$tpKey","tpKey","geneListData","xMetaSet","clusters","cluster","xMeta","xLabels","k","plotWidth","plotHeight","yLabels","zData","maskData","hoverData","push","zRow","maskRow","hoverTextRow","_geneListData$gene","_geneListData$gene$ge","_geneListData$gene$ge2","val","undefined","parseFloat","shapes","annotations","startIndex","endIndex","type","xref","yref","x0","x1","y0","y1","line","layer","fillcolor","cellTypeGroups","idx","_ref5","indices","start","Math","end","displayLabel","x","y","text","showarrow","font","size","align","allNull","flat","every","v","isNaN","fontStyle","visible","marginTop","toggleVisibility","downloadTPData","_data$tpKey2","clusterMap","allPairs","_geneListData$gene2","_geneListData$gene2$g","clusterObj","c","clusterList","headerRow1","_ref6","headerRow2","_ref7","_","cl","merges","col","span","s","r","e","dataRows","row","_ref8","_geneListData$gene3","_geneListData$gene3$g","_geneListData$gene3$g2","sheetData","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","marginRight","borderRadius","Plot","useResizeHandler","z","colorscale","zmid","showscale","colorbar","side","weight","hovertext","hovertemplate","hoverinfo","opacity","layout","l","t","yaxis","tickvals","ticktext","automargin","dtick","constrain","ticks","xaxis","tickangle","tickfont","showline","showgrid","zeroline","config","responsive","renderPlot","scrollTo","behavior","bottom","WrappedApp","BrowserRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0e006656.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Select from \"react-select\";\nimport Plot from \"react-plotly.js\";\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { useLocation, useNavigate, BrowserRouter } from 'react-router-dom';\nimport * as XLSX from \"xlsx\";\nimport { matchSorter } from 'match-sorter';\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [geneListOptions, setGeneListOptions] = useState([]);\n  const [selectedGeneList, setSelectedGeneList] = useState(null);\n  const [geneOptions, setGeneOptions] = useState([]);\n  const [selectedGenes, setSelectedGenes] = useState([]);\n  const [timepoints, setTimepoints] = useState([]);\n  const [selectedTimepointRange, setSelectedTimepointRange] = useState([0, 0]);\n  const [allGenesByGeneList, setAllGenesByGeneList] = useState({});\n  const [cellTypes, setCellTypes] = useState([]);\n  const [selectedCellTypes, setSelectedCellTypes] = useState([]);\n  const [genotypes, setGenotypes] = useState([]);\n  const [selectedGenotypes, setSelectedGenotypes] = useState([]);\n  const [plotVisibility, setPlotVisibility] = useState({});\n  const [showScrollUp, setShowScrollUp] = useState(false);\n  const [geneDetailsByGeneList, setGeneDetailsByGeneList] = useState({});\n  const location = useLocation();\n  const navigate = useNavigate();\n  const skipNextSync = useRef(false);\n  const [showDescriptions, setShowDescriptions] = useState(false);\n  \n  // This is used to avoid label overflow\n  const wrappedLabels = {\n    \"Companion cell\": \"Companion<br>cell\",\n    \"Epidermis\": \"Epi-<br>dermis\",\n    \"G2/M phase\": \"G2/m<br>phase\",\n    \"Leaf guard cell\": \"Leaf<br>guard<br>cell\",\n    \"Leaf pavement cell\": \"Leaf<br>pave-<br>ment\\cell\",\n    \"Mesophyll\": \"Meso<br>phyll\",\n    \"Phloem parenchyma\": \"Phloem<br>paren-<br>chyma\",\n    \"S phase\": \"S phase\",\n    \"Unknown\": \"Unknown\",\n    \"Xylem\": \"Xylem\",\n  };\n  \n  // This is for the scroll up button\n  useEffect(() => {\n    const handleScroll = () => setShowScrollUp(window.scrollY > 300);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  \n  // This is for reading the json files\n  useEffect(() => {\n    const files = [\"1h.json\", \"3h.json\", \"6h.json\"];\n    Promise.all(\n      files.map(f => fetch(`/data/processed/${f}`).then(res => res.json()))\n    ).then(jsons => {\n      const newData = {};\n      const geneLists = new Set();\n      const allGenesByGeneList = {};\n      const allCellTypes = new Set();\n      const allGenotypes = new Set();\n      const tpMap = {};\n      const geneDetailsByList = {};\n\n      files.forEach((file, i) => {\n        const json = jsons[i];\n        const tp = `${json.Timepoint}h`;\n        tpMap[tp] = true;\n        newData[tp] = json.GeneList;\n\n        Object.entries(json.GeneList).forEach(([geneList, genes]) => {\n          geneLists.add(geneList);\n          if (!allGenesByGeneList[geneList]) allGenesByGeneList[geneList] = new Set();\n          if (!geneDetailsByList[geneList]) geneDetailsByList[geneList] = {};\n\n          Object.entries(genes).forEach(([gene, geneData]) => {\n            allGenesByGeneList[geneList].add(gene);\n\n            // Get gene name from Details block\n            const geneName = geneData?.Details?.GeneName || '';\n            const label = geneName ? `${gene} (${geneName})` : gene;\n            const description = geneData?.Details?.Description || '';\n\n            // Store in details map for later fuzzy search\n            geneDetailsByList[geneList][gene] = {\n              id: gene,\n              name: geneName,\n              label,\n              description\n            };\n\n            Object.entries(geneData).forEach(([genotype, cellMap]) => {\n              if (genotype === \"Details\") return;\n              allGenotypes.add(genotype);\n              Object.keys(cellMap || {}).forEach(cellType => {\n                allCellTypes.add(cellType);\n              });\n            });\n          });\n        });\n      });\n\n      const numericTPs = Object.keys(tpMap)\n        .map(tp => parseInt(tp))\n        .sort((a, b) => a - b);\n\n      setData(newData);\n      setTimepoints(numericTPs);\n      setSelectedTimepointRange([numericTPs[0], numericTPs[numericTPs.length - 1]]);\n      setGeneListOptions(Array.from(geneLists).sort());\n      setAllGenesByGeneList(allGenesByGeneList);\n      setGeneDetailsByGeneList(geneDetailsByList);\n      setCellTypes(Array.from(allCellTypes).sort());\n      setGenotypes(Array.from(allGenotypes).sort());\n    });\n  }, []);\n\n  // This is for showing the genes specific to the selected GeneList\n  useEffect(() => {\n    if (selectedGeneList && allGenesByGeneList[selectedGeneList]) {\n      const geneDetails = geneDetailsByGeneList[selectedGeneList] || {};\n      const options = Object.values(geneDetails).map(({ id, label }) => ({\n        value: id,\n        label: label || id\n      }));\n      setGeneOptions(options);\n      setSelectedGenes([]);\n    }\n  }, [selectedGeneList, allGenesByGeneList, geneDetailsByGeneList]);\n\n  // This resizes the heatmap upon new selection\n  // It has some time delay to avoid early rendering\n  useEffect(() => {\n    setTimeout(() => {\n      window.dispatchEvent(new Event('resize'));\n    }, 150);\n  }, [selectedGenes, selectedGeneList, selectedGenotypes, selectedCellTypes]);\n\n  // Sync geneList and others first — but NOT genes\n  useEffect(() => {\n    if (\n      geneListOptions.length === 0 ||\n      genotypes.length === 0 ||\n      cellTypes.length === 0 ||\n      timepoints.length === 0 ||\n      Object.keys(allGenesByGeneList).length === 0\n    ) return;\n\n    if (skipNextSync.current) {\n      skipNextSync.current = false;\n      return;\n    }\n\n    const params = new URLSearchParams(location.search);\n    const org = params.get(\"geneList\") || geneListOptions[0];\n    const cellTypesParsed = params.get(\"cellTypes\")?.split(\",\") || [cellTypes[0]];\n    const genotypesParsed = params.get(\"genotypes\")?.split(\",\") || [genotypes[0]];\n\n    const tpRange = params.get(\"tpRange\")?.split(\",\").map(Number);\n    const validRange = tpRange?.length === 2 && !tpRange.includes(NaN)\n      ? tpRange\n      : [timepoints[0], timepoints[timepoints.length - 1]];\n\n    setSelectedGeneList(org);\n    setSelectedCellTypes(cellTypesParsed);\n    setSelectedGenotypes(genotypesParsed);\n    setSelectedTimepointRange(validRange);\n  }, [\n    location.search,\n    geneListOptions,\n    genotypes,\n    cellTypes,\n    allGenesByGeneList,\n    timepoints\n  ]);\n\n  // Sync genes separately — only after geneOptions are available\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const genes = params.get(\"genes\")?.split(\",\") || [];\n    const validGenes = genes.filter(g => geneOptions.includes(g));\n    if (validGenes.length) {\n      setSelectedGenes(validGenes);\n    }\n  }, [geneOptions, location.search]);\n\n  // Sync state → URL only if meaningful values are selected\n  useEffect(() => {\n    if (\n      !selectedGeneList ||\n      selectedGenes.length === 0 ||\n      selectedGenotypes.length === 0 ||\n      selectedCellTypes.length === 0 ||\n      (selectedTimepointRange[0] === 0 && selectedTimepointRange[1] === 0)\n    ) {\n      return;\n    }\n\n    const params = new URLSearchParams();\n    if (selectedGeneList) params.set(\"geneList\", selectedGeneList);\n    if (selectedGenes.length) params.set(\"genes\", selectedGenes.join(\",\"));\n    if (selectedGenotypes.length) params.set(\"genotypes\", selectedGenotypes.join(\",\"));\n    if (selectedCellTypes.length) params.set(\"cellTypes\", selectedCellTypes.join(\",\"));\n    if (selectedTimepointRange.length === 2) params.set(\"tpRange\", selectedTimepointRange.join(\",\"));\n\n    const newSearch = params.toString();\n    const currentSearch = location.search.startsWith(\"?\") ? location.search.substring(1) : location.search;\n\n    if (newSearch !== currentSearch) {\n      skipNextSync.current = true;\n      navigate({ search: newSearch }, { replace: true });\n    }\n  }, [\n    selectedGeneList,\n    selectedGenes,\n    selectedGenotypes,\n    selectedCellTypes,\n    selectedTimepointRange,\n    navigate,\n    location.search\n  ]);\n\n  // Renders plot for selected timepoint/s\n  const renderPlot = (tp) => {\n    const tpKey = `${tp}h`;\n    const geneListData = data[tpKey]?.[selectedGeneList];\n    if (!geneListData) return null;\n\n    const xMetaSet = new Set();\n    selectedGenes.forEach(gene => {\n      const geneData = geneListData[gene];\n      if (!geneData) return;\n      selectedGenotypes.forEach(genotype => {\n        const cellMap = geneData[genotype] || {};\n        selectedCellTypes.forEach(cellType => {\n          const clusters = cellMap[cellType] || {};\n          Object.keys(clusters).forEach(cluster => {\n            if (cluster.startsWith(\"log2FC\")) {\n              xMetaSet.add(`${cellType}||${cluster}`);\n            }\n          });\n        });\n      });\n    });\n\n    const xMeta = Array.from(xMetaSet).sort();\n    const xLabels = xMeta.map(k => k.split(\"||\")[1].replace(\"log2FC_\", \"\"));\n\n    const tileSize = 50;\n    const plotWidth = tileSize * xLabels.length + 400;\n    const plotHeight = tileSize * selectedGenes.length * selectedGenotypes.length + 200;\n\n    const yLabels = [];\n    const zData = [];\n    const maskData = [];\n    const hoverData = [];\n\n    selectedGenes.forEach(gene => {\n      selectedGenotypes.forEach(genotype => {\n        yLabels.push(`${gene} - ${genotype}`);\n        const zRow = [];\n        const maskRow = [];\n        const hoverTextRow = [];\n\n        xMeta.forEach(key => {\n          const [cellType, cluster] = key.split(\"||\");\n          const val = geneListData[gene]?.[genotype]?.[cellType]?.[cluster];\n        \n          if (val === \"ns\") {\n            zRow.push(NaN);              // Still not plottable\n            maskRow.push(1);             // Masked\n            hoverTextRow.push(\"ns\");     // show \"ns\"\n          } else if (val === undefined || val === null) {\n            zRow.push(null);             // Missing data\n            maskRow.push(1);\n            hoverTextRow.push(\"No data\");  // distinguish\n          } else {\n            zRow.push(parseFloat(val));\n            maskRow.push(0);\n            hoverTextRow.push(val);\n          }\n        });\n\n        zData.push(zRow);\n        maskData.push(maskRow);\n        hoverData.push(hoverTextRow);\n      });\n    });\n\n    const shapes = [];\n    const annotations = [];\n\n    for (let i = 0; i < selectedGenes.length; i++) {\n      const startIndex = i * selectedGenotypes.length;\n      const endIndex = startIndex + selectedGenotypes.length - 1;\n\n      shapes.push({\n        type: 'rect',\n        xref: 'x',\n        yref: 'y',\n        x0: -0.5,\n        x1: xLabels.length - 0.5,\n        y0: startIndex - 0.5,\n        y1: endIndex + 0.5,\n        line: {\n          color: 'white',\n          width: 2\n        },\n        layer: 'above',\n        fillcolor: 'rgba(0,0,0,0)'\n      });\n    }\n\n    const cellTypeGroups = {};\n    xMeta.forEach((key, idx) => {\n      const [cellType] = key.split(\"||\");\n      if (!cellTypeGroups[cellType]) cellTypeGroups[cellType] = [];\n      cellTypeGroups[cellType].push(idx);\n    });\n\n    Object.entries(cellTypeGroups).forEach(([cellType, indices]) => {\n      const start = Math.min(...indices);\n      const end = Math.max(...indices);\n    \n      // Use the wrapped labels if there is only a single cluster in the cell type\n      const displayLabel = (indices.length === 1 && wrappedLabels[cellType])\n      ? wrappedLabels[cellType]\n      : cellType;\n\n      // Background rectangle for the cell type label\n      shapes.push({\n        type: 'rect',\n        xref: 'x',\n        yref: 'y',\n        x0: start - 0.5,\n        x1: end + 0.5,\n        y0: yLabels.length - 0.5 + 0.2,  // just above heatmap\n        y1: yLabels.length - 0.5 + 1.2,  // height of label\n        fillcolor: '#bfbaba',           // light gray background\n        line: {\n          color: 'white',\n          width: 2 },\n        layer: 'below'\n      });\n    \n      // Cell type label text (annotation on top)\n      annotations.push({\n        x: (start + end) / 2,\n        y: yLabels.length - 0.5 + 0.7,\n        xref: 'x',\n        yref: 'y',\n        text: displayLabel,\n        showarrow: false,\n        font: { size: 9, color: '#333' },\n        align: 'center'\n      });\n    \n      // Optional vertical separator\n      if (start > 0) {\n        shapes.push({\n          type: 'line',\n          x0: start - 0.5,\n          x1: start - 0.5,\n          y0: -0.5,\n          y1: yLabels.length - 0.5,\n          xref: 'x',\n          yref: 'y',\n          line: {\n            color: 'white',\n            width: 2\n          },\n          layer: 'above'\n        });\n      }\n    });\n\n    const allNull = zData.length === 0 || zData.flat().every(v => v === null || Number.isNaN(v));\n    \n    // Skip rendering the plot if there's no data or \"ns\" (not significant)\n    if (!xLabels.length || !yLabels.length || !zData.length || allNull) {\n      return (\n        <div id={`plot-${tpKey}`} key={tpKey} style={{ marginBottom: \"3rem\" }}>\n          <h3>{tpKey}</h3>\n          <div style={{ marginBottom: '0.5rem', color: '#666', fontStyle: 'italic' }}>\n            All values are not statistically significant or missing. No heatmap rendered.\n          </div>\n        </div>\n      );\n    }\n\n    const visible = plotVisibility[tpKey] !== false; // Default to true\n    const toggleVisibility = () => {\n      setPlotVisibility(prev => ({ ...prev, [tpKey]: !visible }));\n    };\n\n    const downloadTPData = () => {\n      const tpKey = `${tp}h`;\n      const geneListData = data[tpKey]?.[selectedGeneList];\n      if (!geneListData) return;\n    \n      const clusterMap = {}; // { CellType: [Cluster1, Cluster2, ...] }\n      const allPairs = [];\n    \n      [...selectedCellTypes].sort().forEach(cellType => {\n        const clusters = new Set();\n        selectedGenes.forEach(gene => {\n          selectedGenotypes.forEach(genotype => {\n            const clusterObj = geneListData?.[gene]?.[genotype]?.[cellType];\n            if (clusterObj) {\n              Object.keys(clusterObj).forEach(c => clusters.add(c));\n            }\n          });\n        });\n        const clusterList = Array.from(clusters).sort();\n        clusterMap[cellType] = clusterList;\n        clusterList.forEach(c => allPairs.push([cellType, c]));\n      });\n    \n      // Header rows\n      const headerRow1 = [\"Gene\", \"Genotype\", ...allPairs.map(([ct]) => ct)];\n      const headerRow2 = [\"\", \"\", ...allPairs.map(([_, cl]) => cl)];\n    \n      // Merge info for header row 1\n      const merges = [];\n      let col = 2;\n      for (const [cellType, clusters] of Object.entries(clusterMap)) {\n        const span = clusters.length;\n        if (span > 1) {\n          merges.push({\n            s: { r: 0, c: col },\n            e: { r: 0, c: col + span - 1 }\n          });\n        }\n        col += span;\n      }\n    \n      // Fill data rows\n      const dataRows = [];\n      selectedGenes.forEach(gene => {\n        selectedGenotypes.forEach(genotype => {\n          const row = [gene, genotype];\n          allPairs.forEach(([ct, cl]) => {\n            const val = geneListData?.[gene]?.[genotype]?.[ct]?.[cl];\n            row.push(val !== undefined && val !== null && !Number.isNaN(val) ? val : \"No Data\");\n          });\n          dataRows.push(row);\n        });\n      });\n    \n      // Final sheet data with headers\n      const sheetData = [headerRow1, headerRow2, ...dataRows];\n    \n      // Create workbook\n      const ws = XLSX.utils.aoa_to_sheet(sheetData);\n      ws[\"!merges\"] = merges;\n    \n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n    \n      XLSX.writeFile(wb, `${tpKey}_data.xlsx`);\n    };\n    \n    \n    return (\n      <div id={`plot-${tpKey}`} key={tpKey} style={{ marginBottom: \"3rem\" }}>\n        {/* Header row with title, show/hide toggle, and download button */}\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '2rem',\n            flexWrap: 'wrap',\n          }}\n        >\n          {/* Left side: Timepoint label + toggle button */}\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n            <h3 style={{ margin: 0 }}>\n              {tpKey}\n              <span\n                title=\"This heatmap shows log₂ fold change. Gray tiles represent 'ns' (not statistically significant) or No data.\"\n                style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}\n              >\n                ℹ️\n              </span>\n            </h3>\n            <button onClick={toggleVisibility} style={{ fontSize: '0.85rem' }}>\n              {visible ? 'Hide' : 'Show'}\n            </button>\n          </div>\n    \n          {/* Right side: Download button */}\n          <button\n            onClick={downloadTPData}\n            style={{\n              marginLeft: 'auto',\n              marginRight: '2rem',\n              padding: '0.4rem 0.8rem',\n              backgroundColor: '#3276db',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              fontSize: '0.9rem',\n              cursor: 'pointer',\n            }}\n          >\n            Download {tpKey} Data\n          </button>\n        </div>\n    \n        {/* Plot block */}\n        {visible && (\n          <Plot\n            useResizeHandler={false}\n            style={{ width: `${plotWidth}px`, height: `${plotHeight}px` }}\n            data={[\n              {\n                z: zData,\n                x: xLabels.map((_, i) => i),\n                y: yLabels.map((_, i) => i),\n                type: \"heatmap\",\n                colorscale: [[0, \"blue\"], [0.5, \"white\"], [1, \"red\"]],\n                zmid: 0,\n                showscale: true,\n                colorbar: {\n                  title: {\n                    text: \"log₂ Fold Change\",\n                    side: \"right\",\n                    font: { size: 12, weight: \"bold\" }\n                  }\n                },\n                hovertext: hoverData,\n                hovertemplate: \"%{y}<br>%{x}: %{hovertext}<extra></extra>\",\n              },\n              {\n                z: maskData,\n                x: xLabels.map((_, i) => i),\n                y: yLabels.map((_, i) => i),\n                type: \"heatmap\",\n                colorscale: [[0, \"rgba(0,0,0,0)\"], [1, \"#d3d3d3\"]],\n                showscale: false,\n                hoverinfo: \"skip\",\n                opacity: 1\n              }\n            ]}\n            layout={{\n              width: plotWidth,\n              height: plotHeight,\n              margin: { l: 180, r: 30, t: 40, b: 140 },\n              yaxis: {\n                tickvals: yLabels.map((_, i) => i),\n                ticktext: yLabels,\n                automargin: true,\n                dtick: 1,\n                constrain: 'domain',\n                ticks: \"\",\n              },\n              xaxis: {\n                tickvals: xLabels.map((_, i) => i),\n                ticktext: xLabels,\n                tickangle: -60,\n                tickfont: { size: 12 },\n                automargin: true,\n                constrain: 'domain',\n                ticks: '',\n                showline: false,\n                showgrid: false,\n                zeroline: false\n              },\n              shapes,\n              annotations\n            }}\n            config={{ responsive: true }}\n          />\n        )}\n      </div>\n    );\n       \n  };\n\n  return (\n    <>\n      {/* FULL-WIDTH NAVBAR */}\n      <div\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: '#f8f9fa',\n          zIndex: 100,\n          padding: '1rem 3rem 1.5rem 3rem',\n          borderBottom: '1px solid #ccc',\n          width: '100%',\n        }}\n      >\n        {/* Title positioned on top */}\n        <div style={{ width: '100%', marginBottom: '1rem' }}>\n          <h2 style={{ margin: 0 }}>Arabidopsis Gene Expression Explorer</h2>\n        </div>\n  \n        {/* Filter controls in flex container */}\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '2rem',\n            alignItems: 'flex-start',\n          }}\n        >\n          {/* GeneList */}\n          <div style={{ maxWidth: '150px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Gene List</strong>\n              <span title=\"Select a Gene List to explore gene expression.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 56 }}>\n              <Select\n                options={geneListOptions.map(o => ({ value: o, label: o }))}\n                value={selectedGeneList ? { value: selectedGeneList, label: selectedGeneList } : null}\n                onChange={opt => setSelectedGeneList(opt?.value || null)}\n                placeholder=\"Search Gene List...\"\n                isSearchable\n                styles={{ container: base => ({ ...base, width: '100%' }) }}\n              />\n            </div>\n          </div>\n  \n          {/* Genotypes */}\n          <div style={{ maxWidth: '220px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Genotypes</strong>\n              <span title=\"Compare gene expression across selected genotypes.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <Select\n              isMulti\n              options={genotypes.map(g => ({ value: g, label: g }))}\n              value={selectedGenotypes.map(g => ({ value: g, label: g }))}\n              onChange={(opts) => setSelectedGenotypes((opts || []).map(o => o.value))}\n              placeholder=\"Select genotypes\"\n              closeMenuOnSelect={false}\n              isSearchable\n              styles={{\n                container: base => ({ ...base, width: '100%' }),\n                valueContainer: base => ({\n                  ...base,\n                  maxHeight: 80,\n                  overflowY: 'auto',\n                  flexWrap: 'wrap',\n                }),\n                menu: base => ({ ...base, zIndex: 9999 }),\n              }}\n            />\n          </div>\n  \n          {/* Genes */}\n          <div style={{ maxWidth: '230px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Genes</strong>\n              <span title=\"Choose one or more genes from the selected geneList.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 120, display: 'flex', alignItems: 'stretch' }}>\n              {console.log(\"Gene options:\", geneOptions)}\n              <Select\n                isMulti\n                options={(geneOptions || []).map(g =>\n                  typeof g === \"string\" ? { value: g, label: g } : g\n                )}\n                value={selectedGenes.map(g => {\n                  const match = geneOptions.find(o => o.value === g);\n                  return match || { value: g, label: g };\n                })}\n                onChange={(opts) => setSelectedGenes((opts || []).map(o => o.value))}\n                filterOption={(option, inputValue) =>\n                  matchSorter([option], inputValue, { keys: ['label'] }).length > 0\n                  // option.label.toLowerCase().includes(inputValue.toLowerCase())\n                }\n                placeholder=\"Select genes\"\n                isSearchable\n                isDisabled={!selectedGeneList}\n                styles={{\n                  container: base => ({ ...base, width: '100%' }),\n                  control: base => ({\n                    ...base,\n                    minHeight: 120,\n                    height: 120,\n                    alignItems: 'flex-start',\n                  }),\n                  valueContainer: base => ({\n                    ...base,\n                    maxHeight: 80,\n                    overflowY: 'auto',\n                    flexWrap: 'wrap',\n                  }),\n                  menu: base => ({ ...base, zIndex: 9999 }),\n                }}\n              />\n            </div>\n          </div>\n  \n          {/* Sidebar Toggle Tab */}\n          {selectedGenes.length > 0 && (\n            <div\n              onClick={() => setShowDescriptions(prev => !prev)}\n              style={{\n                position: 'fixed',\n                top: '40%',\n                right: showDescriptions ? '350px' : 0,\n                zIndex: 1000,\n                width: '40px',\n                height: '160px',\n                backgroundColor: '#3276db',\n                color: 'white',\n                writingMode: 'vertical-rl',\n                transform: 'rotate(180deg)',\n                fontSize: '0.85rem',\n                fontWeight: 'bold',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                cursor: 'pointer',\n                borderTopRightRadius: '6px',\n                borderBottomRightRadius: '6px',\n                boxShadow: '0 2px 6px rgba(0,0,0,0.3)',\n                transition: 'right 0.3s ease-in-out',\n                userSelect: 'none'\n              }}\n            >\n              {showDescriptions ? 'Hide Gene Description' : 'Show Gene Description'}\n            </div>\n          )}\n\n          {/* Sidebar Drawer */}\n          {selectedGenes.length > 0 && (\n            <div\n              style={{\n                position: 'fixed',\n                top: 0,\n                right: showDescriptions ? 0 : '-320px',\n                height: '100vh',\n                width: showDescriptions ? '320px' : '40px',\n                backgroundColor: '#f7f5ed',\n                borderLeft: '1px solid #ccc',\n                boxShadow: '-2px 0 6px rgba(0,0,0,0.1)',\n                padding: '1rem',\n                overflowY: 'auto',\n                zIndex: 1001,\n                transition: 'right 0.3s ease-in-out'\n              }}\n            >\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <h4 style={{ margin: 0 }}>Gene Descriptions</h4>\n                <button\n                  onClick={() => setShowDescriptions(false)}\n                  style={{\n                    border: 'none',\n                    background: 'transparent',\n                    fontSize: '1.2rem',\n                    cursor: 'pointer'\n                  }}\n                >\n                  ✕\n                </button>\n              </div>\n\n              <hr />\n\n              {selectedGenes.map(gene => {\n                const details = geneDetailsByGeneList[selectedGeneList]?.[gene];\n                return (\n                  <div key={gene} style={{ marginBottom: '1rem' }}>\n                    <strong>{details?.label}</strong>\n                    <div style={{ fontSize: '0.9rem', color: '#555' }}>\n                      {details?.description || \"No description available.\"}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n\n          {/* Cell Types */}\n          <div style={{ maxWidth: '240px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Cell Types</strong>\n              <span title=\"Filter by specific cell types to focus your analysis.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 120, display: 'flex', alignItems: 'stretch' }}>\n              <Select\n                isMulti\n                options={cellTypes.map(ct => ({ value: ct, label: ct }))}\n                value={selectedCellTypes.map(ct => ({ value: ct, label: ct }))}\n                onChange={(opts) => setSelectedCellTypes((opts || []).map(o => o.value))}\n                placeholder=\"Select cell types\"\n                closeMenuOnSelect={false}\n                isSearchable\n                styles={{\n                  container: base => ({ ...base, width: '100%' }),\n                  control: base => ({\n                    ...base,\n                    minHeight: 120,\n                    height: 120,\n                    alignItems: 'flex-start',\n                  }),\n                  valueContainer: base => ({\n                    ...base,\n                    maxHeight: 80,\n                    overflowY: 'auto',\n                    flexWrap: 'wrap',\n                  }),\n                  menu: base => ({ ...base, zIndex: 9999 }),\n                }}\n              />\n            </div>\n          </div>\n  \n          {/* Timepoint */}\n          {timepoints.length > 1 && (\n            <div style={{ maxWidth: '280px', flex: '1 1 240px' }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n                <strong>Timepoint</strong>\n                <span title=\"Select a range of timepoints to display plots.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                  ℹ️\n                </span>\n              </div>\n              <Slider\n                range\n                min={timepoints[0]}\n                max={timepoints[timepoints.length - 1]}\n                value={selectedTimepointRange}\n                onChange={range => setSelectedTimepointRange(range)}\n                marks={timepoints.reduce((acc, tp) => {\n                  acc[tp] = tp.toString();\n                  return acc;\n                }, {})}\n                step={null}\n                allowCross={false}\n                style={{ width: '100%' }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n  \n      {/* CONTENT AREA */}\n      <div style={{ padding: '1rem', paddingLeft: '5vw' }}>\n        {timepoints\n          .filter(tp => tp >= selectedTimepointRange[0] && tp <= selectedTimepointRange[1])\n          .map(tp => renderPlot(tp))}\n  \n        {showScrollUp && (\n          <button\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n            style={{\n              position: 'fixed',\n              bottom: '30px',\n              right: '30px',\n              zIndex: 1000,\n              padding: '0.6rem 0.95rem',\n              fontSize: '1.5rem',\n              borderRadius: '50%',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              boxShadow: '0 2px 6px rgba(0,0,0,0.2)',\n              cursor: 'pointer'\n            }}\n          >\n            ⮝\n          </button>\n        )}\n      </div>\n    </>\n  );\n  \n  \n}\n\nexport default function WrappedApp() {\n  return (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}