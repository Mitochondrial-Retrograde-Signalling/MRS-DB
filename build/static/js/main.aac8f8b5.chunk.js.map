{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","setData","useState","geneListOptions","setGeneListOptions","selectedGeneList","setSelectedGeneList","geneOptions","setGeneOptions","selectedGenes","setSelectedGenes","timepoints","setTimepoints","selectedTimepointRange","setSelectedTimepointRange","allGenesByGeneList","setAllGenesByGeneList","cellTypes","setCellTypes","selectedCellTypes","setSelectedCellTypes","genotypes","setGenotypes","selectedGenotypes","setSelectedGenotypes","plotVisibility","setPlotVisibility","showScrollUp","setShowScrollUp","geneDetailsByGeneList","setGeneDetailsByGeneList","location","useLocation","navigate","useNavigate","skipNextSync","useRef","wrappedLabels","useEffect","handleScroll","window","scrollY","addEventListener","removeEventListener","files","Promise","all","map","f","fetch","then","res","json","jsons","newData","geneLists","Set","allCellTypes","allGenotypes","tpMap","geneDetailsByList","forEach","file","i","tp","Timepoint","GeneList","Object","entries","_ref","geneList","genes","add","_ref2","_geneData$Details","gene","geneData","geneName","Details","GeneName","label","id","name","_ref3","genotype","cellMap","keys","cellType","numericTPs","parseInt","sort","a","b","length","Array","from","geneDetails","options","values","_ref4","value","setTimeout","dispatchEvent","Event","_params$get","_params$get2","_params$get3","current","params","URLSearchParams","search","org","get","cellTypesParsed","split","genotypesParsed","tpRange","Number","validRange","includes","NaN","_params$get4","validGenes","filter","g","set","join","newSearch","toString","startsWith","substring","replace","React","createElement","Fragment","style","position","top","backgroundColor","zIndex","padding","borderBottom","width","marginBottom","margin","display","flexWrap","gap","alignItems","maxWidth","flex","title","marginLeft","cursor","fontSize","color","height","Select","o","onChange","opt","placeholder","isSearchable","styles","container","base","isMulti","opts","closeMenuOnSelect","valueContainer","maxHeight","overflowY","menu","console","log","find","filterOption","option","inputValue","matchSorter","isDisabled","control","minHeight","ct","Slider","range","min","max","marks","reduce","acc","step","allowCross","paddingLeft","_data$tpKey","tpKey","geneListData","xMetaSet","clusters","cluster","xMeta","xLabels","k","plotWidth","plotHeight","yLabels","zData","maskData","hoverData","push","zRow","maskRow","hoverTextRow","key","_geneListData$gene","_geneListData$gene$ge","_geneListData$gene$ge2","val","undefined","parseFloat","shapes","annotations","startIndex","endIndex","type","xref","yref","x0","x1","y0","y1","line","layer","fillcolor","cellTypeGroups","idx","_ref5","indices","start","Math","end","displayLabel","x","y","text","showarrow","font","size","align","allNull","flat","every","v","isNaN","fontStyle","visible","justifyContent","marginTop","onClick","toggleVisibility","prev","downloadTPData","_data$tpKey2","clusterMap","allPairs","_geneListData$gene2","_geneListData$gene2$g","clusterObj","c","clusterList","headerRow1","_ref6","headerRow2","_ref7","_","cl","merges","col","span","s","r","e","dataRows","row","_ref8","_geneListData$gene3","_geneListData$gene3$g","_geneListData$gene3$g2","sheetData","ws","XLSX","aoa_to_sheet","wb","book_new","book_append_sheet","marginRight","border","borderRadius","Plot","useResizeHandler","z","colorscale","zmid","showscale","colorbar","side","weight","hovertext","hovertemplate","hoverinfo","opacity","layout","l","t","yaxis","tickvals","ticktext","automargin","dtick","constrain","ticks","xaxis","tickangle","tickfont","showline","showgrid","zeroline","config","responsive","renderPlot","scrollTo","behavior","bottom","right","boxShadow","WrappedApp","BrowserRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.aac8f8b5.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Select from \"react-select\";\nimport Plot from \"react-plotly.js\";\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { useLocation, useNavigate, BrowserRouter } from 'react-router-dom';\nimport * as XLSX from \"xlsx\";\nimport { matchSorter } from 'match-sorter';\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [geneListOptions, setGeneListOptions] = useState([]);\n  const [selectedGeneList, setSelectedGeneList] = useState(null);\n  const [geneOptions, setGeneOptions] = useState([]);\n  const [selectedGenes, setSelectedGenes] = useState([]);\n  const [timepoints, setTimepoints] = useState([]);\n  const [selectedTimepointRange, setSelectedTimepointRange] = useState([0, 0]);\n  const [allGenesByGeneList, setAllGenesByGeneList] = useState({});\n  const [cellTypes, setCellTypes] = useState([]);\n  const [selectedCellTypes, setSelectedCellTypes] = useState([]);\n  const [genotypes, setGenotypes] = useState([]);\n  const [selectedGenotypes, setSelectedGenotypes] = useState([]);\n  const [plotVisibility, setPlotVisibility] = useState({});\n  const [showScrollUp, setShowScrollUp] = useState(false);\n  const [geneDetailsByGeneList, setGeneDetailsByGeneList] = useState({});\n  const location = useLocation();\n  const navigate = useNavigate();\n  const skipNextSync = useRef(false);\n\n  // This is used to avoid label overflow\n  const wrappedLabels = {\n    \"Companion cell\": \"Companion<br>cell\",\n    \"Epidermis\": \"Epi-<br>dermis\",\n    \"G2/M phase\": \"G2/m<br>phase\",\n    \"Leaf guard cell\": \"Leaf<br>guard<br>cell\",\n    \"Leaf pavement cell\": \"Leaf<br>pave-<br>ment\\cell\",\n    \"Mesophyll\": \"Meso<br>phyll\",\n    \"Phloem parenchyma\": \"Phloem<br>paren-<br>chyma\",\n    \"S phase\": \"S phase\",\n    \"Unknown\": \"Unknown\",\n    \"Xylem\": \"Xylem\",\n  };\n  \n  // This is for the scroll up button\n  useEffect(() => {\n    const handleScroll = () => setShowScrollUp(window.scrollY > 300);\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  \n  // This is for reading the json files\n  useEffect(() => {\n    const files = [\"1h.json\", \"3h.json\", \"6h.json\"];\n    Promise.all(\n      files.map(f => fetch(`/data/processed/${f}`).then(res => res.json()))\n    ).then(jsons => {\n      const newData = {};\n      const geneLists = new Set();\n      const allGenesByGeneList = {};\n      const allCellTypes = new Set();\n      const allGenotypes = new Set();\n      const tpMap = {};\n      const geneDetailsByList = {};\n\n      files.forEach((file, i) => {\n        const json = jsons[i];\n        const tp = `${json.Timepoint}h`;\n        tpMap[tp] = true;\n        newData[tp] = json.GeneList;\n\n        Object.entries(json.GeneList).forEach(([geneList, genes]) => {\n          geneLists.add(geneList);\n          if (!allGenesByGeneList[geneList]) allGenesByGeneList[geneList] = new Set();\n          if (!geneDetailsByList[geneList]) geneDetailsByList[geneList] = {};\n\n          Object.entries(genes).forEach(([gene, geneData]) => {\n            allGenesByGeneList[geneList].add(gene);\n\n            // Get gene name from Details block\n            const geneName = geneData?.Details?.GeneName || '';\n            const label = geneName ? `${gene} (${geneName})` : gene;\n\n            // Store in details map for later fuzzy search\n            geneDetailsByList[geneList][gene] = {\n              id: gene,\n              name: geneName,\n              label\n            };\n\n            Object.entries(geneData).forEach(([genotype, cellMap]) => {\n              if (genotype === \"Details\") return;\n              allGenotypes.add(genotype);\n              Object.keys(cellMap || {}).forEach(cellType => {\n                allCellTypes.add(cellType);\n              });\n            });\n          });\n        });\n      });\n\n      const numericTPs = Object.keys(tpMap)\n        .map(tp => parseInt(tp))\n        .sort((a, b) => a - b);\n\n      setData(newData);\n      setTimepoints(numericTPs);\n      setSelectedTimepointRange([numericTPs[0], numericTPs[numericTPs.length - 1]]);\n      setGeneListOptions(Array.from(geneLists).sort());\n      setAllGenesByGeneList(allGenesByGeneList);\n      setGeneDetailsByGeneList(geneDetailsByList);\n      setCellTypes(Array.from(allCellTypes).sort());\n      setGenotypes(Array.from(allGenotypes).sort());\n    });\n  }, []);\n\n  // This is for showing the genes specific to the selected GeneList\n  useEffect(() => {\n    if (selectedGeneList && allGenesByGeneList[selectedGeneList]) {\n      const geneDetails = geneDetailsByGeneList[selectedGeneList] || {};\n      const options = Object.values(geneDetails).map(({ id, label }) => ({\n        value: id,\n        label: label || id\n      }));\n      setGeneOptions(options);\n      setSelectedGenes([]);\n    }\n  }, [selectedGeneList, allGenesByGeneList, geneDetailsByGeneList]);\n\n  // This resizes the heatmap upon new selection\n  // It has some time delay to avoid early rendering\n  useEffect(() => {\n    setTimeout(() => {\n      window.dispatchEvent(new Event('resize'));\n    }, 150);\n  }, [selectedGenes, selectedGeneList, selectedGenotypes, selectedCellTypes]);\n\n  // Sync geneList and others first — but NOT genes\n  useEffect(() => {\n    if (\n      geneListOptions.length === 0 ||\n      genotypes.length === 0 ||\n      cellTypes.length === 0 ||\n      timepoints.length === 0 ||\n      Object.keys(allGenesByGeneList).length === 0\n    ) return;\n\n    if (skipNextSync.current) {\n      skipNextSync.current = false;\n      return;\n    }\n\n    const params = new URLSearchParams(location.search);\n    const org = params.get(\"geneList\") || geneListOptions[0];\n    const cellTypesParsed = params.get(\"cellTypes\")?.split(\",\") || [cellTypes[0]];\n    const genotypesParsed = params.get(\"genotypes\")?.split(\",\") || [genotypes[0]];\n\n    const tpRange = params.get(\"tpRange\")?.split(\",\").map(Number);\n    const validRange = tpRange?.length === 2 && !tpRange.includes(NaN)\n      ? tpRange\n      : [timepoints[0], timepoints[timepoints.length - 1]];\n\n    setSelectedGeneList(org);\n    setSelectedCellTypes(cellTypesParsed);\n    setSelectedGenotypes(genotypesParsed);\n    setSelectedTimepointRange(validRange);\n  }, [\n    location.search,\n    geneListOptions,\n    genotypes,\n    cellTypes,\n    allGenesByGeneList,\n    timepoints\n  ]);\n\n  // Sync genes separately — only after geneOptions are available\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const genes = params.get(\"genes\")?.split(\",\") || [];\n    const validGenes = genes.filter(g => geneOptions.includes(g));\n    if (validGenes.length) {\n      setSelectedGenes(validGenes);\n    }\n  }, [geneOptions, location.search]);\n\n  // Sync state → URL only if meaningful values are selected\n  useEffect(() => {\n    if (\n      !selectedGeneList ||\n      selectedGenes.length === 0 ||\n      selectedGenotypes.length === 0 ||\n      selectedCellTypes.length === 0 ||\n      (selectedTimepointRange[0] === 0 && selectedTimepointRange[1] === 0)\n    ) {\n      return;\n    }\n\n    const params = new URLSearchParams();\n    if (selectedGeneList) params.set(\"geneList\", selectedGeneList);\n    if (selectedGenes.length) params.set(\"genes\", selectedGenes.join(\",\"));\n    if (selectedGenotypes.length) params.set(\"genotypes\", selectedGenotypes.join(\",\"));\n    if (selectedCellTypes.length) params.set(\"cellTypes\", selectedCellTypes.join(\",\"));\n    if (selectedTimepointRange.length === 2) params.set(\"tpRange\", selectedTimepointRange.join(\",\"));\n\n    const newSearch = params.toString();\n    const currentSearch = location.search.startsWith(\"?\") ? location.search.substring(1) : location.search;\n\n    if (newSearch !== currentSearch) {\n      skipNextSync.current = true;\n      navigate({ search: newSearch }, { replace: true });\n    }\n  }, [\n    selectedGeneList,\n    selectedGenes,\n    selectedGenotypes,\n    selectedCellTypes,\n    selectedTimepointRange,\n    navigate,\n    location.search\n  ]);\n\n  // Renders plot for selected timepoint/s\n  const renderPlot = (tp) => {\n    const tpKey = `${tp}h`;\n    const geneListData = data[tpKey]?.[selectedGeneList];\n    if (!geneListData) return null;\n\n    const xMetaSet = new Set();\n    selectedGenes.forEach(gene => {\n      const geneData = geneListData[gene];\n      if (!geneData) return;\n      selectedGenotypes.forEach(genotype => {\n        const cellMap = geneData[genotype] || {};\n        selectedCellTypes.forEach(cellType => {\n          const clusters = cellMap[cellType] || {};\n          Object.keys(clusters).forEach(cluster => {\n            if (cluster.startsWith(\"log2FC\")) {\n              xMetaSet.add(`${cellType}||${cluster}`);\n            }\n          });\n        });\n      });\n    });\n\n    const xMeta = Array.from(xMetaSet).sort();\n    const xLabels = xMeta.map(k => k.split(\"||\")[1].replace(\"log2FC_\", \"\"));\n\n    const tileSize = 50;\n    const plotWidth = tileSize * xLabels.length + 400;\n    const plotHeight = tileSize * selectedGenes.length * selectedGenotypes.length + 200;\n\n    const yLabels = [];\n    const zData = [];\n    const maskData = [];\n    const hoverData = [];\n\n    selectedGenes.forEach(gene => {\n      selectedGenotypes.forEach(genotype => {\n        yLabels.push(`${gene} - ${genotype}`);\n        const zRow = [];\n        const maskRow = [];\n        const hoverTextRow = [];\n\n        xMeta.forEach(key => {\n          const [cellType, cluster] = key.split(\"||\");\n          const val = geneListData[gene]?.[genotype]?.[cellType]?.[cluster];\n        \n          if (val === \"ns\") {\n            zRow.push(NaN);              // Still not plottable\n            maskRow.push(1);             // Masked\n            hoverTextRow.push(\"ns\");     // show \"ns\"\n          } else if (val === undefined || val === null) {\n            zRow.push(null);             // Missing data\n            maskRow.push(1);\n            hoverTextRow.push(\"No data\");  // distinguish\n          } else {\n            zRow.push(parseFloat(val));\n            maskRow.push(0);\n            hoverTextRow.push(val);\n          }\n        });\n\n        zData.push(zRow);\n        maskData.push(maskRow);\n        hoverData.push(hoverTextRow);\n      });\n    });\n\n    const shapes = [];\n    const annotations = [];\n\n    for (let i = 0; i < selectedGenes.length; i++) {\n      const startIndex = i * selectedGenotypes.length;\n      const endIndex = startIndex + selectedGenotypes.length - 1;\n\n      shapes.push({\n        type: 'rect',\n        xref: 'x',\n        yref: 'y',\n        x0: -0.5,\n        x1: xLabels.length - 0.5,\n        y0: startIndex - 0.5,\n        y1: endIndex + 0.5,\n        line: {\n          color: 'white',\n          width: 2\n        },\n        layer: 'above',\n        fillcolor: 'rgba(0,0,0,0)'\n      });\n    }\n\n    const cellTypeGroups = {};\n    xMeta.forEach((key, idx) => {\n      const [cellType] = key.split(\"||\");\n      if (!cellTypeGroups[cellType]) cellTypeGroups[cellType] = [];\n      cellTypeGroups[cellType].push(idx);\n    });\n\n    Object.entries(cellTypeGroups).forEach(([cellType, indices]) => {\n      const start = Math.min(...indices);\n      const end = Math.max(...indices);\n    \n      // Use the wrapped labels if there is only a single cluster in the cell type\n      const displayLabel = (indices.length === 1 && wrappedLabels[cellType])\n      ? wrappedLabels[cellType]\n      : cellType;\n\n      // Background rectangle for the cell type label\n      shapes.push({\n        type: 'rect',\n        xref: 'x',\n        yref: 'y',\n        x0: start - 0.5,\n        x1: end + 0.5,\n        y0: yLabels.length - 0.5 + 0.2,  // just above heatmap\n        y1: yLabels.length - 0.5 + 1.2,  // height of label\n        fillcolor: '#bfbaba',           // light gray background\n        line: {\n          color: 'white',\n          width: 2 },\n        layer: 'below'\n      });\n    \n      // Cell type label text (annotation on top)\n      annotations.push({\n        x: (start + end) / 2,\n        y: yLabels.length - 0.5 + 0.7,\n        xref: 'x',\n        yref: 'y',\n        text: displayLabel,\n        showarrow: false,\n        font: { size: 9, color: '#333' },\n        align: 'center'\n      });\n    \n      // Optional vertical separator\n      if (start > 0) {\n        shapes.push({\n          type: 'line',\n          x0: start - 0.5,\n          x1: start - 0.5,\n          y0: -0.5,\n          y1: yLabels.length - 0.5,\n          xref: 'x',\n          yref: 'y',\n          line: {\n            color: 'white',\n            width: 2\n          },\n          layer: 'above'\n        });\n      }\n    });\n\n    const allNull = zData.length === 0 || zData.flat().every(v => v === null || Number.isNaN(v));\n    \n    // Skip rendering the plot if there's no data or \"ns\" (not significant)\n    if (!xLabels.length || !yLabels.length || !zData.length || allNull) {\n      return (\n        <div id={`plot-${tpKey}`} key={tpKey} style={{ marginBottom: \"3rem\" }}>\n          <h3>{tpKey}</h3>\n          <div style={{ marginBottom: '0.5rem', color: '#666', fontStyle: 'italic' }}>\n            All values are not statistically significant or missing. No heatmap rendered.\n          </div>\n        </div>\n      );\n    }\n\n    const visible = plotVisibility[tpKey] !== false; // Default to true\n    const toggleVisibility = () => {\n      setPlotVisibility(prev => ({ ...prev, [tpKey]: !visible }));\n    };\n\n    const downloadTPData = () => {\n      const tpKey = `${tp}h`;\n      const geneListData = data[tpKey]?.[selectedGeneList];\n      if (!geneListData) return;\n    \n      const clusterMap = {}; // { CellType: [Cluster1, Cluster2, ...] }\n      const allPairs = [];\n    \n      [...selectedCellTypes].sort().forEach(cellType => {\n        const clusters = new Set();\n        selectedGenes.forEach(gene => {\n          selectedGenotypes.forEach(genotype => {\n            const clusterObj = geneListData?.[gene]?.[genotype]?.[cellType];\n            if (clusterObj) {\n              Object.keys(clusterObj).forEach(c => clusters.add(c));\n            }\n          });\n        });\n        const clusterList = Array.from(clusters).sort();\n        clusterMap[cellType] = clusterList;\n        clusterList.forEach(c => allPairs.push([cellType, c]));\n      });\n    \n      // Header rows\n      const headerRow1 = [\"Gene\", \"Genotype\", ...allPairs.map(([ct]) => ct)];\n      const headerRow2 = [\"\", \"\", ...allPairs.map(([_, cl]) => cl)];\n    \n      // Merge info for header row 1\n      const merges = [];\n      let col = 2;\n      for (const [cellType, clusters] of Object.entries(clusterMap)) {\n        const span = clusters.length;\n        if (span > 1) {\n          merges.push({\n            s: { r: 0, c: col },\n            e: { r: 0, c: col + span - 1 }\n          });\n        }\n        col += span;\n      }\n    \n      // Fill data rows\n      const dataRows = [];\n      selectedGenes.forEach(gene => {\n        selectedGenotypes.forEach(genotype => {\n          const row = [gene, genotype];\n          allPairs.forEach(([ct, cl]) => {\n            const val = geneListData?.[gene]?.[genotype]?.[ct]?.[cl];\n            row.push(val !== undefined && val !== null && !Number.isNaN(val) ? val : \"No Data\");\n          });\n          dataRows.push(row);\n        });\n      });\n    \n      // Final sheet data with headers\n      const sheetData = [headerRow1, headerRow2, ...dataRows];\n    \n      // Create workbook\n      const ws = XLSX.utils.aoa_to_sheet(sheetData);\n      ws[\"!merges\"] = merges;\n    \n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\n    \n      XLSX.writeFile(wb, `${tpKey}_data.xlsx`);\n    };\n    \n    \n    return (\n      <div id={`plot-${tpKey}`} key={tpKey} style={{ marginBottom: \"3rem\" }}>\n        {/* Header row with title, show/hide toggle, and download button */}\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: '2rem',\n            flexWrap: 'wrap',\n          }}\n        >\n          {/* Left side: Timepoint label + toggle button */}\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n            <h3 style={{ margin: 0 }}>\n              {tpKey}\n              <span\n                title=\"This heatmap shows log₂ fold change. Gray tiles represent 'ns' (not statistically significant) or No data.\"\n                style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}\n              >\n                ℹ️\n              </span>\n            </h3>\n            <button onClick={toggleVisibility} style={{ fontSize: '0.85rem' }}>\n              {visible ? 'Hide' : 'Show'}\n            </button>\n          </div>\n    \n          {/* Right side: Download button */}\n          <button\n            onClick={downloadTPData}\n            style={{\n              marginLeft: 'auto',\n              marginRight: '2rem',\n              padding: '0.4rem 0.8rem',\n              backgroundColor: '#3276db',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              fontSize: '0.9rem',\n              cursor: 'pointer',\n            }}\n          >\n            Download {tpKey} Data\n          </button>\n        </div>\n    \n        {/* Plot block */}\n        {visible && (\n          <Plot\n            useResizeHandler={false}\n            style={{ width: `${plotWidth}px`, height: `${plotHeight}px` }}\n            data={[\n              {\n                z: zData,\n                x: xLabels.map((_, i) => i),\n                y: yLabels.map((_, i) => i),\n                type: \"heatmap\",\n                colorscale: [[0, \"blue\"], [0.5, \"white\"], [1, \"red\"]],\n                zmid: 0,\n                showscale: true,\n                colorbar: {\n                  title: {\n                    text: \"log₂ Fold Change\",\n                    side: \"right\",\n                    font: { size: 12, weight: \"bold\" }\n                  }\n                },\n                hovertext: hoverData,\n                hovertemplate: \"%{y}<br>%{x}: %{hovertext}<extra></extra>\",\n              },\n              {\n                z: maskData,\n                x: xLabels.map((_, i) => i),\n                y: yLabels.map((_, i) => i),\n                type: \"heatmap\",\n                colorscale: [[0, \"rgba(0,0,0,0)\"], [1, \"#d3d3d3\"]],\n                showscale: false,\n                hoverinfo: \"skip\",\n                opacity: 1\n              }\n            ]}\n            layout={{\n              width: plotWidth,\n              height: plotHeight,\n              margin: { l: 180, r: 30, t: 40, b: 140 },\n              yaxis: {\n                tickvals: yLabels.map((_, i) => i),\n                ticktext: yLabels,\n                automargin: true,\n                dtick: 1,\n                constrain: 'domain',\n                ticks: \"\",\n              },\n              xaxis: {\n                tickvals: xLabels.map((_, i) => i),\n                ticktext: xLabels,\n                tickangle: -60,\n                tickfont: { size: 12 },\n                automargin: true,\n                constrain: 'domain',\n                ticks: '',\n                showline: false,\n                showgrid: false,\n                zeroline: false\n              },\n              shapes,\n              annotations\n            }}\n            config={{ responsive: true }}\n          />\n        )}\n      </div>\n    );\n       \n  };\n\n  return (\n    <>\n      {/* FULL-WIDTH NAVBAR */}\n      <div\n        style={{\n          position: 'sticky',\n          top: 0,\n          backgroundColor: '#f8f9fa',\n          zIndex: 100,\n          padding: '1rem 3rem 1.5rem 3rem',\n          borderBottom: '1px solid #ccc',\n          width: '100%',\n        }}\n      >\n        {/* Title positioned on top */}\n        <div style={{ width: '100%', marginBottom: '1rem' }}>\n          <h2 style={{ margin: 0 }}>Arabidopsis Gene Expression Explorer</h2>\n        </div>\n  \n        {/* Filter controls in flex container */}\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            gap: '2rem',\n            alignItems: 'flex-start',\n          }}\n        >\n          {/* GeneList */}\n          <div style={{ maxWidth: '150px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Gene List</strong>\n              <span title=\"Select a Gene List to explore gene expression.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 56 }}>\n              <Select\n                options={geneListOptions.map(o => ({ value: o, label: o }))}\n                value={selectedGeneList ? { value: selectedGeneList, label: selectedGeneList } : null}\n                onChange={opt => setSelectedGeneList(opt?.value || null)}\n                placeholder=\"Search Gene List...\"\n                isSearchable\n                styles={{ container: base => ({ ...base, width: '100%' }) }}\n              />\n            </div>\n          </div>\n  \n          {/* Genotypes */}\n          <div style={{ maxWidth: '220px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Genotypes</strong>\n              <span title=\"Compare gene expression across selected genotypes.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <Select\n              isMulti\n              options={genotypes.map(g => ({ value: g, label: g }))}\n              value={selectedGenotypes.map(g => ({ value: g, label: g }))}\n              onChange={(opts) => setSelectedGenotypes((opts || []).map(o => o.value))}\n              placeholder=\"Select genotypes\"\n              closeMenuOnSelect={false}\n              isSearchable\n              styles={{\n                container: base => ({ ...base, width: '100%' }),\n                valueContainer: base => ({\n                  ...base,\n                  maxHeight: 80,\n                  overflowY: 'auto',\n                  flexWrap: 'wrap',\n                }),\n                menu: base => ({ ...base, zIndex: 9999 }),\n              }}\n            />\n          </div>\n  \n          {/* Genes */}\n          <div style={{ maxWidth: '230px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Genes</strong>\n              <span title=\"Choose one or more genes from the selected geneList.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 120, display: 'flex', alignItems: 'stretch' }}>\n              {console.log(\"Gene options:\", geneOptions)}\n              <Select\n                isMulti\n                options={(geneOptions || []).map(g =>\n                  typeof g === \"string\" ? { value: g, label: g } : g\n                )}\n                value={selectedGenes.map(g => {\n                  const match = geneOptions.find(o => o.value === g);\n                  return match || { value: g, label: g };\n                })}\n                onChange={(opts) => setSelectedGenes((opts || []).map(o => o.value))}\n                filterOption={(option, inputValue) =>\n                  matchSorter([option], inputValue, { keys: ['label'] }).length > 0\n                  // option.label.toLowerCase().includes(inputValue.toLowerCase())\n                }\n                placeholder=\"Select genes\"\n                isSearchable\n                isDisabled={!selectedGeneList}\n                styles={{\n                  container: base => ({ ...base, width: '100%' }),\n                  control: base => ({\n                    ...base,\n                    minHeight: 120,\n                    height: 120,\n                    alignItems: 'flex-start',\n                  }),\n                  valueContainer: base => ({\n                    ...base,\n                    maxHeight: 80,\n                    overflowY: 'auto',\n                    flexWrap: 'wrap',\n                  }),\n                  menu: base => ({ ...base, zIndex: 9999 }),\n                }}\n              />\n            </div>\n          </div>\n  \n          {/* Cell Types */}\n          <div style={{ maxWidth: '240px', flex: '1 1 240px' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n              <strong>Cell Types</strong>\n              <span title=\"Filter by specific cell types to focus your analysis.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                ℹ️\n              </span>\n            </div>\n            <div style={{ height: 120, display: 'flex', alignItems: 'stretch' }}>\n              <Select\n                isMulti\n                options={cellTypes.map(ct => ({ value: ct, label: ct }))}\n                value={selectedCellTypes.map(ct => ({ value: ct, label: ct }))}\n                onChange={(opts) => setSelectedCellTypes((opts || []).map(o => o.value))}\n                placeholder=\"Select cell types\"\n                closeMenuOnSelect={false}\n                isSearchable\n                styles={{\n                  container: base => ({ ...base, width: '100%' }),\n                  control: base => ({\n                    ...base,\n                    minHeight: 120,\n                    height: 120,\n                    alignItems: 'flex-start',\n                  }),\n                  valueContainer: base => ({\n                    ...base,\n                    maxHeight: 80,\n                    overflowY: 'auto',\n                    flexWrap: 'wrap',\n                  }),\n                  menu: base => ({ ...base, zIndex: 9999 }),\n                }}\n              />\n            </div>\n          </div>\n  \n          {/* Timepoint */}\n          {timepoints.length > 1 && (\n            <div style={{ maxWidth: '280px', flex: '1 1 240px' }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem', marginBottom: '0.5rem' }}>\n                <strong>Timepoint</strong>\n                <span title=\"Select a range of timepoints to display plots.\" style={{ marginLeft: '8px', cursor: 'help', fontSize: '1rem', color: '#666' }}>\n                  ℹ️\n                </span>\n              </div>\n              <Slider\n                range\n                min={timepoints[0]}\n                max={timepoints[timepoints.length - 1]}\n                value={selectedTimepointRange}\n                onChange={range => setSelectedTimepointRange(range)}\n                marks={timepoints.reduce((acc, tp) => {\n                  acc[tp] = tp.toString();\n                  return acc;\n                }, {})}\n                step={null}\n                allowCross={false}\n                style={{ width: '100%' }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n  \n      {/* CONTENT AREA */}\n      <div style={{ padding: '1rem', paddingLeft: '5vw' }}>\n        {timepoints\n          .filter(tp => tp >= selectedTimepointRange[0] && tp <= selectedTimepointRange[1])\n          .map(tp => renderPlot(tp))}\n  \n        {showScrollUp && (\n          <button\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n            style={{\n              position: 'fixed',\n              bottom: '30px',\n              right: '30px',\n              zIndex: 1000,\n              padding: '0.6rem 0.95rem',\n              fontSize: '1.5rem',\n              borderRadius: '50%',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              boxShadow: '0 2px 6px rgba(0,0,0,0.2)',\n              cursor: 'pointer'\n            }}\n          >\n            ⮝\n          </button>\n        )}\n      </div>\n    </>\n  );\n  \n  \n}\n\nexport default function WrappedApp() {\n  return (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}